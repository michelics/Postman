{
	"info": {
		"_postman_id": "b2e22bc7-31be-4b5b-9b50-be3e9fe10a8a",
		"name": "api_sandbox",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "cenarios_validos",
			"item": [
				{
					"name": "authorization",
					"item": [
						{
							"name": "01 /auth/oauth/v2/token - Status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "929dba9e-643c-43c0-99ce-c82f5bc589cc",
										"exec": [
											"// Salva lista de cartões",
											"var listObjs = [{brand: \"VISA\", card_number:4220611400867974},",
											"                {brand:\"MASTERCARD\", card_number:5155901222280001},",
											"                {brand:\"ELO\", card_number:5067230000009011},",
											"                {brand:\"HIPER\", card_number:6370950924782803},",
											"                {brand:\"AMEX\", card_number:374245002741006}];",
											"pm.globals.set('listCards', JSON.stringify(listObjs));",
											"",
											"// Função que gera números de CPF válidos",
											"pm.globals.set(\"cpf\", 'x'.replace( /x/, function cpf()",
											"{",
											"           var n = 9;",
											"           var n1 = gera_random(n);",
											"           var n2 = gera_random(n);",
											"           var n3 = gera_random(n);",
											"           var n4 = gera_random(n);",
											"           var n5 = gera_random(n);",
											"           var n6 = gera_random(n);",
											"           var n7 = gera_random(n);",
											"           var n8 = gera_random(n);",
											"           var n9 = gera_random(n);",
											"           var d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;",
											"           d1 = 11 - ( mod(d1,11) );",
											"           if (d1>=10) d1 = 0;",
											"           var d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;",
											"           d2 = 11 - ( mod(d2,11) );",
											"           if (d2>=10) d2 = 0;",
											"           return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;",
											"}));",
											"",
											"// Função para gerar números randômicos",
											"function gera_random(n)",
											"{",
											"    var ranNum = Math.round(Math.random()*n);",
											"    return ranNum;",
											"}",
											"",
											"// Função para retornar o resto da divisao entre números (mod)",
											"function mod(dividendo,divisor)",
											"{",
											"          return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));",
											"}",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3d53c620-aa6b-4070-9395-11a7a2ddd60b",
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", data.access_token);\r",
											"\r",
											"eval(globals.postmanBDD);\r",
											"\r",
											"describe('Verifica autenticação', () => {\r",
											"\r",
											"  it('should return a valid response', () => {\r",
											"    response.should.have.status(200);\r",
											"    response.should.be.json;\r",
											"    response.body.should.not.be.empty;\r",
											"  });\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{oAuth}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "oob",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{uri}}/auth/oauth/v2/token",
									"host": [
										"{{uri}}"
									],
									"path": [
										"auth",
										"oauth",
										"v2",
										"token"
									]
								},
								"description": "Geração do token de acesso."
							},
							"response": []
						}
					],
					"description": "Geração do token de acesso\r\nEndpoint responsável pela geração do token de acesso utilizado nas demais requisições, para isso utilizamos HTTP Basic Authentication\r\n\r\nhttps://api.getnet.com.br/v1/doc/api#tag/Autenticacao",
					"_postman_isSubFolder": true
				},
				{
					"name": "token",
					"item": [
						{
							"name": "02 /v1/tokens/card - Status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "02287397-f625-4bad-903b-0cc726bc9837",
										"exec": [
											"var listCards = JSON.parse(globals.listCards);",
											"",
											"//Set credit card",
											"pm.environment.set('brand', listCards[0].brand);",
											"pm.environment.set('card_number', listCards[0].card_number);",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7d6666f6-beac-421e-8342-8e09fee2dc5e",
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
											"\r",
											"eval(globals.postmanBDD);\r",
											"\r",
											"describe('Verifica response', () => {\r",
											"\r",
											"  it('should return a valid response', () => {\r",
											"    response.should.have.status(201);\r",
											"    response.should.be.json;\r",
											"    response.body.should.not.be.empty;\r",
											"  });\r",
											"  \r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"card_number\": \"{{card_number}}\",\r\n  \"customer_id\": \"{{customer_id}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/card",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"card"
									]
								},
								"description": "Geração do token do cartão. Aprovada (cartão válido)."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "payments",
					"item": [
						{
							"name": "credit",
							"item": [
								{
									"name": "a_vista",
									"item": [
										{
											"name": "01 /v1/tokens/card - Status 201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
														"type": "text/javascript",
														"exec": [
															"var listCards = JSON.parse(globals.listCards);",
															"",
															"//Set credit card",
															"pm.environment.set('brand', listCards[0].brand);",
															"pm.environment.set('card_number', listCards[0].card_number);",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(201);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/tokens/card",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tokens",
														"card"
													]
												},
												"description": "Geração do token do cartão. Aprovada (cartão válido)."
											},
											"response": []
										},
										{
											"name": "02 /v1/payments/credit - Status 200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bc7df3ce-d27a-494c-aef3-292bad851ce4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"order_id\",'yyyyyyyy-yyxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'X' ? r : (r&0x3|0x8); return v.toString(16); }));",
															"pm.environment.set(\"customer_id\",\"customer_\"+ Math.floor(Math.random() * 99999999));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f3247a6f-0855-488a-89aa-ac37b2bce25b",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"payment_id\", data.payment_id);",
															"",
															"",
															"eval(globals.postmanBDD);",
															"",
															"describe('Verifica response', () => {",
															"",
															"  it('should return a valid response', () => {",
															"    response.should.have.status(200);",
															"    response.should.be.json;",
															"    response.body.should.not.be.empty;",
															"  });",
															"  ",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": \"100\",\n \"currency\": \"BRL\",\n \"order\": {\n   \"order_id\": \"{{order_id}}\",\n   \"sales_tax\": 0,\n   \"product_type\": \"service\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"first_name\": \"João\",\n   \"last_name\": \"da Silva\",\n   \"name\": \"João da Silva\",\n   \"email\": \"customer@email.com.br\",\n   \"document_type\": \"CPF\",\n   \"document_number\": \"{{cpf}}\",\n   \"phone_number\": \"5551999887766\",\n   \"billing_address\": {\n     \"street\": \"Av. Brasil\",\n     \"number\": \"1000\",\n     \"complement\": \"Sala 1\",\n     \"district\": \"São Geraldo\",\n     \"city\": \"Porto Alegre\",\n     \"state\": \"RS\",\n     \"country\": \"Brasil\",\n     \"postal_code\": \"90230060\"\n   }\n },\n \"device\": {\n   \"ip_address\": \"127.0.0.1\",\n   \"device_id\": \"cce643ee-4c1c-4961-8251-a39a95e109f7\"\n },\n \"shippings\": [\n   {\n     \"first_name\": \"João\",\n     \"name\": \"João da Silva\",\n     \"email\": \"customer@email.com.br\",\n     \"phone_number\": \"5551999887766\",\n     \"shipping_amount\": 3000,\n     \"address\": {\n       \"street\": \"Av. Brasil\",\n       \"number\": \"1000\",\n       \"complement\": \"Sala 1\",\n       \"district\": \"São Geraldo\",\n       \"city\": \"Porto Alegre\",\n       \"state\": \"RS\",\n       \"country\": \"Brasil\",\n       \"postal_code\": \"90230060\"\n     }\n   }\n ],\n \"credit\": {\n   \"delayed\": false,\n   \"authenticated\": false,\n   \"pre_authorization\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"security_code\": \"123\",\n     \"brand\": \"{{brand}}\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/payments/credit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"payments",
														"credit"
													]
												},
												"description": "Pagamento efetuado com sucesso. Transação aprovada. Informar transaction_type igual a FULL para pagto à vista."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "parcelado_sem_juros",
									"item": [
										{
											"name": "03 /v1/tokens/card - Status 201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "804c6214-9b89-4e83-b9ee-79bf8045620d",
														"type": "text/javascript",
														"exec": [
															"var listCards = JSON.parse(globals.listCards);",
															"",
															"//Set credit card",
															"pm.environment.set('brand', listCards[0].brand);",
															"pm.environment.set('card_number', listCards[0].card_number);",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(201);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/tokens/card",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tokens",
														"card"
													]
												},
												"description": "Geração do token do cartão. Aprovada (cartão válido)."
											},
											"response": []
										},
										{
											"name": "04 /v1/payments/credit - Status 200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8ee55a21-51fe-4e72-8832-6df4d04a70af",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"order_id\",'yyyyyyyy-yyxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'X' ? r : (r&0x3|0x8); return v.toString(16); }));",
															"pm.environment.set(\"customer_id\",\"customer_\"+ Math.floor(Math.random() * 99999999));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee9fd044-3eef-41eb-8f77-c651eb719569",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"payment_id\", data.payment_id);",
															"",
															"eval(globals.postmanBDD);",
															"",
															"describe('Verifica response', () => {",
															"",
															"  it('should return a valid response', () => {",
															"    response.should.have.status(200);",
															"    response.should.be.json;",
															"    response.body.should.not.be.empty;",
															"  });",
															"  ",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": \"0404\",\n \"currency\": \"BRL\",\n \"order\": {\n   \"order_id\": \"{{order_id}}\",\n   \"sales_tax\": 0,\n   \"product_type\": \"service\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"first_name\": \"João\",\n   \"last_name\": \"da Silva\",\n   \"name\": \"João da Silva\",\n   \"email\": \"customer@email.com.br\",\n   \"document_type\": \"CPF\",\n   \"document_number\": \"{{cpf}}\",\n   \"phone_number\": \"5551999887766\",\n   \"billing_address\": {\n     \"street\": \"Av. Brasil\",\n     \"number\": \"1000\",\n     \"complement\": \"Sala 1\",\n     \"district\": \"São Geraldo\",\n     \"city\": \"Porto Alegre\",\n     \"state\": \"RS\",\n     \"country\": \"Brasil\",\n     \"postal_code\": \"90230060\"\n   }\n },\n \"device\": {\n   \"ip_address\": \"127.0.0.1\",\n   \"device_id\": \"hash-device-id\"\n },\n \"shippings\": [\n   {\n     \"first_name\": \"João\",\n     \"name\": \"João da Silva\",\n     \"email\": \"customer@email.com.br\",\n     \"phone_number\": \"5551999887766\",\n     \"shipping_amount\": 3000,\n     \"address\": {\n       \"street\": \"Av. Brasil\",\n       \"number\": \"1000\",\n       \"complement\": \"Sala 1\",\n       \"district\": \"São Geraldo\",\n       \"city\": \"Porto Alegre\",\n       \"state\": \"RS\",\n       \"country\": \"Brasil\",\n       \"postal_code\": \"90230060\"\n     }\n   }\n ],\n \"credit\": {\n   \"delayed\": false,\n   \"authenticated\": false,\n   \"pre_authorization\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"INSTALL_NO_INTEREST\",\n   \"number_installments\": 4,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"security_code\": \"123\",\n     \"brand\": \"{{brand}}\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/payments/credit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"payments",
														"credit"
													]
												},
												"description": "Pagamento efetuado com sucesso. Transação aprovada.\nOpções de parcelamento: \"INSTALL_NO_INTEREST\" para parcelamento sem juros; e \"INSTALL_WITH_INTEREST\" parcelamento com juros."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "parcelado_com_juros",
									"item": [
										{
											"name": "05 /v1/tokens/card - Status 201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "804c6214-9b89-4e83-b9ee-79bf8045620d",
														"type": "text/javascript",
														"exec": [
															"var listCards = JSON.parse(globals.listCards);",
															"",
															"//Set credit card",
															"pm.environment.set('brand', listCards[0].brand);",
															"pm.environment.set('card_number', listCards[0].card_number);",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(201);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/tokens/card",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tokens",
														"card"
													]
												},
												"description": "Geração do token do cartão. Aprovada (cartão válido)."
											},
											"response": []
										},
										{
											"name": "06 /v1/payments/credit - Status 200",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8ee55a21-51fe-4e72-8832-6df4d04a70af",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"order_id\",'yyyyyyyy-yyxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'X' ? r : (r&0x3|0x8); return v.toString(16); }));",
															"pm.environment.set(\"customer_id\",\"customer_\"+ Math.floor(Math.random() * 99999999));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee9fd044-3eef-41eb-8f77-c651eb719569",
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);",
															"",
															"postman.setEnvironmentVariable(\"payment_id\", data.payment_id);",
															"",
															"eval(globals.postmanBDD);",
															"",
															"describe('Verifica response', () => {",
															"",
															"  it('should return a valid response', () => {",
															"    response.should.have.status(200);",
															"    response.should.be.json;",
															"    response.body.should.not.be.empty;",
															"  });",
															"  ",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": \"0303\",\n \"currency\": \"BRL\",\n \"order\": {\n   \"order_id\": \"{{order_id}}\",\n   \"sales_tax\": 0,\n   \"product_type\": \"service\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"first_name\": \"João\",\n   \"last_name\": \"da Silva\",\n   \"name\": \"João da Silva\",\n   \"email\": \"customer@email.com.br\",\n   \"document_type\": \"CPF\",\n   \"document_number\": \"{{cpf}}\",\n   \"phone_number\": \"5551999887766\",\n   \"billing_address\": {\n     \"street\": \"Av. Brasil\",\n     \"number\": \"1000\",\n     \"complement\": \"Sala 1\",\n     \"district\": \"São Geraldo\",\n     \"city\": \"Porto Alegre\",\n     \"state\": \"RS\",\n     \"country\": \"Brasil\",\n     \"postal_code\": \"90230060\"\n   }\n },\n \"device\": {\n   \"ip_address\": \"127.0.0.1\",\n   \"device_id\": \"hash-device-id\"\n },\n \"shippings\": [\n   {\n     \"first_name\": \"João\",\n     \"name\": \"João da Silva\",\n     \"email\": \"customer@email.com.br\",\n     \"phone_number\": \"5551999887766\",\n     \"shipping_amount\": 3000,\n     \"address\": {\n       \"street\": \"Av. Brasil\",\n       \"number\": \"1000\",\n       \"complement\": \"Sala 1\",\n       \"district\": \"São Geraldo\",\n       \"city\": \"Porto Alegre\",\n       \"state\": \"RS\",\n       \"country\": \"Brasil\",\n       \"postal_code\": \"90230060\"\n     }\n   }\n ],\n \"credit\": {\n   \"delayed\": false,\n   \"authenticated\": false,\n   \"pre_authorization\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"INSTALL_WITH_INTEREST\",\n   \"number_installments\": 3,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"security_code\": \"123\",\n     \"brand\": \"{{brand}}\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/payments/credit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"payments",
														"credit"
													]
												},
												"description": "Pagamento efetuado com sucesso. Transação aprovada.\nOpções de parcelamento: \"INSTALL_NO_INTEREST\" para parcelamento sem juros; e \"INSTALL_WITH_INTEREST\" parcelamento com juros."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "Pagamento com cartão de crédito",
							"_postman_isSubFolder": true
						},
						{
							"name": "credit_tardia",
							"item": [
								{
									"name": "a_vista",
									"item": [
										{
											"name": "01 /v1/tokens/card - Status 201",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var listCards = JSON.parse(globals.listCards);\r",
															"\r",
															"//Set credit card\r",
															"pm.environment.set('brand', listCards[0].brand);\r",
															"pm.environment.set('card_number', listCards[0].card_number);\r",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(201);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/tokens/card",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"tokens",
														"card"
													]
												},
												"description": "Geração do token do cartão. Aprovada (cartão válido)."
											},
											"response": []
										},
										{
											"name": "02 /v1/payments/credit - Status 202",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"order_id\",'yyyyyyyy-yyxx-xxxx-xxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'X' ? r : (r&0x3|0x8); return v.toString(16); }));",
															"pm.environment.set(\"customer_id\",\"customer_\"+ Math.floor(Math.random() * 99999999));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"\r",
															"postman.setEnvironmentVariable(\"payment_id\", data.payment_id);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(202);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": \"10000\",\n \"currency\": \"BRL\",\n \"order\": {\n   \"order_id\": \"{{order_id}}\",\n   \"sales_tax\": 0,\n   \"product_type\": \"service\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"first_name\": \"João\",\n   \"last_name\": \"da Silva\",\n   \"name\": \"João da Silva\",\n   \"email\": \"customer@email.com.br\",\n   \"document_type\": \"CPF\",\n   \"document_number\": \"12345678912\",\n   \"phone_number\": \"5551999887766\",\n   \"billing_address\": {\n     \"street\": \"Av. Brasil\",\n     \"number\": \"1000\",\n     \"complement\": \"Sala 1\",\n     \"district\": \"São Geraldo\",\n     \"city\": \"Porto Alegre\",\n     \"state\": \"RS\",\n     \"country\": \"Brasil\",\n     \"postal_code\": \"90230060\"\n   }\n },\n \"device\": {\n   \"ip_address\": \"127.0.0.1\",\n   \"device_id\": \"hash-device-id\"\n },\n \"shippings\": [\n   {\n     \"first_name\": \"João\",\n     \"name\": \"João da Silva\",\n     \"email\": \"customer@email.com.br\",\n     \"phone_number\": \"5551999887766\",\n     \"shipping_amount\": 3000,\n     \"address\": {\n       \"street\": \"Av. Brasil\",\n       \"number\": \"1000\",\n       \"complement\": \"Sala 1\",\n       \"district\": \"São Geraldo\",\n       \"city\": \"Porto Alegre\",\n       \"state\": \"RS\",\n       \"country\": \"Brasil\",\n       \"postal_code\": \"90230060\"\n     }\n   }\n ],\n \"credit\": {\n   \"delayed\": true,\n   \"authenticated\": false,\n   \"pre_authorization\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"security_code\": \"123\",\n   \n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/payments/credit",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"payments",
														"credit"
													]
												},
												"description": "Solicitação de pagamento de crédito com confirmação tardia ou pré autorização recebida, aceita e armazenada esperando confirmação."
											},
											"response": []
										},
										{
											"name": "03 /v1/payments/credit/{payment_id}/confirm - Status 200",
											"event": [
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															"var data = JSON.parse(responseBody);\r",
															"\r",
															"eval(globals.postmanBDD);\r",
															"\r",
															"describe('Verifica response', () => {\r",
															"\r",
															"  it('should return a valid response', () => {\r",
															"    response.should.have.status(200);\r",
															"    response.should.be.json;\r",
															"    response.body.should.not.be.empty;\r",
															"  });\r",
															"  \r",
															"});"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{baseUrl}}/payments/credit/{{payment_id}}/confirm",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"payments",
														"credit",
														"{{payment_id}}",
														"confirm"
													]
												},
												"description": "Pagamento confirmado com sucesso."
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"description": "Confirmação tardia de pagamento ou confirmação de pré autorização com cartão de crédito",
							"_postman_isSubFolder": true
						},
						{
							"name": "boleto",
							"item": [
								{
									"name": "01 /v1/payments/boleto - Status 201",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e66087d6-4362-41af-9bc6-8378630f157a",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"postman.setEnvironmentVariable(\"payment_id\", data.payment_id);",
													"postman.setEnvironmentVariable(\"typeful_line\", data.boleto.typeful_line);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(201);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return the correctly status', () => {",
													"    response.body.status.should.be.equal(\"PENDING\");",
													"    response.body.boleto.status_label.should.be.equal(\"EM ABERTO\");",
													"  });",
													"  ",
													"  it('should return the correctly amount', () => {",
													"    response.body.amount.should.be.equal(300);",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"amount\": 300,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"31/12/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Boleto emitido com sucesso."
									},
									"response": []
								},
								{
									"name": "01 /v1/payments/boleto/{payment_id}/pdf - Status 201",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69163a31-7bf9-4762-a732-72b010d8c6b7",
												"type": "text/javascript",
												"exec": [
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    //response.should.have.status(201);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											},
											{
												"key": "seller_id",
												"value": "{{seller_id}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/{{payment_id}}/pdf",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"{{payment_id}}",
												"pdf"
											]
										},
										"description": "Em caso de sucesso, será retornado o boleto em arquivo PDF."
									},
									"response": []
								},
								{
									"name": "01 /v1/payments/boleto/{payment_id}/html - Status 200",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "368da511-417d-4aca-a466-a8a79c4caee0",
												"type": "text/javascript",
												"exec": [
													"var html = cheerio(responseBody);",
													"",
													"//console.log(linhaDigitavel);",
													"//console.log(typefulLine);",
													"",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(200);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  //Verifica se a linha digitavel (typeful_line) é a mesma no campo Linha Digitavel do boleto HTML'",
													"  tests['typeful_line matches linhaDigitavel'] = environment[\"typeful_line\"] == html.find('td[id=\"linha-digitavel-1\"]').text();",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											},
											{
												"key": "seller_id",
												"value": "{{seller_id}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/{{payment_id}}/html",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"{{payment_id}}",
												"html"
											]
										},
										"description": "Em caso de sucesso, será retornado o boleto em arquivo html."
									},
									"response": []
								}
							],
							"description": "Registro para pagamento com boleto",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "cenarios_invalidos",
			"item": [
				{
					"name": "authorization",
					"item": [
						{
							"name": "01 /auth/oauth/v2/token - Status 201",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3cabac56-35b2-4914-bfdd-eba42bde4880",
										"type": "text/javascript",
										"exec": [
											"// Salva lista de cartões",
											"var listObjs = [{brand: \"VISA\", card_number:4220611400867974},",
											"                {brand:\"MASTERCARD\", card_number:5155901222280001},",
											"                {brand:\"ELO\", card_number:5067230000009011},",
											"                {brand:\"HIPER\", card_number:6370950924782803},",
											"                {brand:\"AMEX\", card_number:374245002741006}];",
											"pm.globals.set('listCards', JSON.stringify(listObjs));",
											"",
											"// Função que gera números de CPF válidos",
											"pm.globals.set(\"cpf\", 'x'.replace( /x/, function cpf()",
											"{",
											"           var n = 9;",
											"           var n1 = gera_random(n);",
											"           var n2 = gera_random(n);",
											"           var n3 = gera_random(n);",
											"           var n4 = gera_random(n);",
											"           var n5 = gera_random(n);",
											"           var n6 = gera_random(n);",
											"           var n7 = gera_random(n);",
											"           var n8 = gera_random(n);",
											"           var n9 = gera_random(n);",
											"           var d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;",
											"           d1 = 11 - ( mod(d1,11) );",
											"           if (d1>=10) d1 = 0;",
											"           var d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;",
											"           d2 = 11 - ( mod(d2,11) );",
											"           if (d2>=10) d2 = 0;",
											"           return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;",
											"}));",
											"",
											"// Função para gerar números randômicos",
											"function gera_random(n)",
											"{",
											"    var ranNum = Math.round(Math.random()*n);",
											"    return ranNum;",
											"}",
											"",
											"// Função para retornar o resto da divisao entre números (mod)",
											"function mod(dividendo,divisor)",
											"{",
											"          return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));",
											"}",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "504c1302-0e1c-4fb2-9da6-530a636164dd",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\", data.access_token);\r",
											"\r",
											"eval(globals.postmanBDD);\r",
											"\r",
											"describe('Verifica autenticação', () => {\r",
											"\r",
											"  it('should return a valid response', () => {\r",
											"    response.should.have.status(200);\r",
											"    response.should.be.json;\r",
											"    response.body.should.not.be.empty;\r",
											"  });\r",
											"  \r",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									},
									{
										"key": "Authorization",
										"value": "Basic {{oAuth}}"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "scope",
											"value": "oob",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "client_credentials",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{uri}}/auth/oauth/v2/token",
									"host": [
										"{{uri}}"
									],
									"path": [
										"auth",
										"oauth",
										"v2",
										"token"
									]
								},
								"description": "Geração do token de acesso."
							},
							"response": []
						}
					],
					"description": "Geração do token de acesso\r\nEndpoint responsável pela geração do token de acesso utilizado nas demais requisições, para isso utilizamos HTTP Basic Authentication\r\n\r\nhttps://api.getnet.com.br/v1/doc/api#tag/Autenticacao",
					"_postman_isSubFolder": true
				},
				{
					"name": "token",
					"item": [
						{
							"name": "01 /v1/tokens/card - Status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "170fad25-6678-42d7-9dd8-f467692f60a2",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"eval(globals.postmanBDD);",
											"",
											"describe('Verifica response', () => {",
											"",
											"  it('should return a valid response', () => {",
											"    response.should.have.status(400);",
											"    response.should.be.json;",
											"    response.body.should.not.be.empty;",
											"  });",
											"  ",
											"  /*it('should return a valid description', () => {",
											"    response.body.details[0].description_detail.should.be.equal(\"card_number lenght should be between 13 and 19. Current length: 23\");",
											"  });*/",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"card_number\": \"51559012222800018888888\"}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/card",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"card"
									]
								},
								"description": "Requisição inválida. Informar um card number inválido: tamanho maior que o permitido."
							},
							"response": []
						},
						{
							"name": "02 /v1/tokens/card - Status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13222842-2371-45c6-b537-45723bc7bbb3",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"eval(globals.postmanBDD);",
											"",
											"describe('Verifica response', () => {",
											"",
											"  it('should return a valid response', () => {",
											"    response.should.have.status(400);",
											"    response.should.be.json;",
											"    response.body.should.not.be.empty;",
											"  });",
											"  ",
											"  /*it('should return a valid description', () => {",
											"    response.body.details[0].description_detail.should.be.equal(\"Invalid card_number formmat.\");",
											"  });*/",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"card_number\": \"0000000000000000\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/card",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"card"
									]
								},
								"description": "Requisição inválida. Informar um card number inválido: somente zero."
							},
							"response": []
						},
						{
							"name": "03 /v1/tokens/card - Status 400",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55160265-3a42-440f-b771-3e6d287be027",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"eval(globals.postmanBDD);",
											"",
											"describe('Verifica response', () => {",
											"",
											"  it('should return a valid response', () => {",
											"    response.should.have.status(400);",
											"    response.should.be.json;",
											"    response.body.should.not.be.empty;",
											"  });",
											"  ",
											"  /*it('should return a valid description', () => {",
											"    response.body.details[0].description_detail.should.be.equal(\"card_number should contain numbers only\");",
											"  });*/",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"card_number\": \"51559RASDD280001\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/card",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"card"
									]
								},
								"description": "Requisição inválida. Informar um card number inválido: caracteres inválidos."
							},
							"response": []
						},
						{
							"name": "04 /v1/tokens/card - Status 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "615a8c86-13a3-4310-b269-cc375d9c1a59",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"eval(globals.postmanBDD);",
											"",
											"describe('Verifica response', () => {",
											"",
											"  it('should return a valid response', () => {",
											"    response.should.have.status(401);",
											"    response.should.be.json;",
											"    response.body.should.not.be.empty;",
											"    response.body.message.should.contains(\"Unauthorized\");",
											"  });",
											"  ",
											"  it('should return a valid description', () => {",
											"    response.body.details[0].description_detail.should.be.equal(\"Invalid client credentials\");",
											"  });",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/card",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"card"
									]
								},
								"description": "Autenticação inválida. Desmarcar header flag Authorization."
							},
							"response": []
						},
						{
							"name": "05 /v1/tokens/card - Status 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e262358d-ace2-46a6-829f-aba5a9d97927",
										"type": "text/javascript",
										"exec": [
											"var data = JSON.parse(responseBody);",
											"",
											"eval(globals.postmanBDD);",
											"",
											"describe('Verifica response', () => {",
											"",
											"  it('should return a valid response', () => {",
											"    response.should.have.status(404);",
											"    response.body.should.not.be.empty;",
											"    response.body.message.should.contains(\"Not Found\");",
											"  });",
											"  ",
											"  it('should return a valid description', () => {",
											"    response.body.details[0].description_detail.should.be.equal(\"Resource not found\");",
											"  });",
											"  ",
											"});"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/tokens/cardz",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"tokens",
										"cardz"
									]
								},
								"description": "Não encontrado. Alterar para uma URL inválida, card com Z."
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "payments",
					"item": [
						{
							"name": "credit",
							"item": [
								{
									"name": "01 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ee26d06-72fe-4e82-b954-a527085db2d9",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"seller_id\\\" is not allowed to be empty\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit com campo seller_id em branco."
									},
									"response": []
								},
								{
									"name": "02 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3446cba-a04c-4367-994d-87af71212db7",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"amount\\\" is required\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit sem o campo amount."
									},
									"response": []
								},
								{
									"name": "03 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "685987a6-c19d-43e0-a6d8-7ba6977f9e81",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"amount\\\" must be a number\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": \"\",\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit com campo seller_id em branco."
									},
									"response": []
								},
								{
									"name": "04 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31d9c348-15eb-4cbc-93d3-e4de985a7130",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"amount\\\" must be a positive number\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": -1,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit informando amount com valor negativo."
									},
									"response": []
								},
								{
									"name": "05 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "682736ef-bc05-40ed-af4f-dec5809ad6b6",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"order_id\\\" is not allowed to be empty\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit com o campo order_id em branco."
									},
									"response": []
								},
								{
									"name": "06 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1df3f177-f271-47a9-803c-4089fa8bd48b",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"order_id\\\" is required\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit sem o campo order_id."
									},
									"response": []
								},
								{
									"name": "07 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac9d7dd0-e624-4a4f-85a4-8dbb0daebc67",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"customer_id\\\" is not allowed to be empty\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\"\n },\n \"customer\": {\n   \"customer_id\": \"\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit com o campo customer_id em branco."
									},
									"response": []
								},
								{
									"name": "08 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08e9f03e-8393-455d-8e9e-7cd8e49d5030",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"customer_id\\\" is required\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\"\n },\n \"customer\": {\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit sem o campo customer_id."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"type": "text/javascript",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"{{card_number}}\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Aprovada (cartão válido)."
									},
									"response": []
								},
								{
									"name": "09 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].antifraud.description.should.contains(\"Cartao informado com data de validade expirada ou invalida\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"06\",\n     \"expiration_year\": \"08\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição inválida. Tentar gerar transação de credit informando expiration_date inválida."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222240005\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). Saldo Insuficiente - 5155901222240005"
									},
									"response": []
								},
								{
									"name": "10 /v1/payments/credit - Status 402",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(402);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-113\");",
													"    response.body.details[0].description.should.contains(\"Saldo Insuficiente\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios. - Saldo Insuficiente"
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222230006\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). - Autorização recusada - 5155901222230006"
									},
									"response": []
								},
								{
									"name": "11 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-116\");",
													"    response.body.details[0].description.should.contains(\"Autorização recusada\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios. - Autorização recusada."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222220007\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). - Excede o Limite de Valor de Aprovação - 5155901222220007"
									},
									"response": []
								},
								{
									"name": "12 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(402);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-999\");",
													"    response.body.details[0].description.should.contains(\"Transacao nao processada.\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios. - Excede o Limite de Valor de Aprovação"
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222210008\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). Excede o Limite de Frequência de Retiradas - 5155901222210008"
									},
									"response": []
								},
								{
									"name": "13 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(402);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-115\");",
													"    response.body.details[0].description.should.contains(\"Excede o Limite de Frequência de Retiradas\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222270002\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). - Cartão Inválido - 5155901222270002"
									},
									"response": []
								},
								{
									"name": "14 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-002\");",
													"    response.body.details[0].description.should.contains(\"Cartão inválido\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222260003\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). - Cartão Vencido - 5155901222260003"
									},
									"response": []
								},
								{
									"name": "15 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(402);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-003\");",
													"    response.body.details[0].description.should.contains(\"Cartão vencido\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios."
									},
									"response": []
								},
								{
									"name": "01 /v1/tokens/card - Status 201",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b6e8e6fc-e9e9-4b69-ba48-e0ae5ed5a2bc",
												"exec": [
													"var listCards = JSON.parse(globals.listCards);",
													"",
													"//Set credit card",
													"pm.environment.set('brand', listCards[0].brand);",
													"pm.environment.set('card_number', listCards[0].card_number);",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b4c6f76f-1c02-439a-8332-65b1ba8670fe",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"postman.setEnvironmentVariable(\"number_token\", data.number_token);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(201);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"card_number\": \"5155901222250004\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/tokens/card",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"tokens",
												"card"
											]
										},
										"description": "Geração do token do cartão. Não aprovada (cartão inválido). - Estabelecimento Inválido - 5155901222250004"
									},
									"response": []
								},
								{
									"name": "16 /v1/payments/credit - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b0a0a2e-5e46-4873-ae4e-79ee1a54f364",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid detail', () => {",
													"    response.body.details[0].error_code.should.contains(\"PAYMENTS-033\");",
													"    response.body.details[0].description.should.contains(\"Estabelecimento inválido\");",
													"  });",
													"  ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"10\",\n     \"expiration_year\": \"23\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Requisição é válida mas pagamento negado. Pode ser negado por vários motivos / regras de negócios."
									},
									"response": []
								},
								{
									"name": "17 /v1/payments/credit - Status 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);\r",
													"\r",
													"eval(globals.postmanBDD);\r",
													"\r",
													"describe('Verifica response', () => {\r",
													"\r",
													"  it('should return a valid response', () => {\r",
													"    response.should.have.status(401);\r",
													"    response.should.be.json;\r",
													"    response.body.should.not.be.empty;\r",
													"  });\r",
													"  \r",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"credit"
											]
										},
										"description": "Autenticação inválida. Desmarcar header flag Authorization."
									},
									"response": []
								},
								{
									"name": "18 /v1/payments/credit - Status 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41468c20-9f4f-4d52-8cc4-91643ab055b5",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(404);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"Resource not found\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n \"seller_id\": \"{{seller_id}}\",\n \"amount\": 100,\n \"order\": {\n   \"order_id\": \"4938796f-f605-4d47-9841-062bac8128f3\"\n },\n \"customer\": {\n   \"customer_id\": \"{{customer_id}}\",\n   \"billing_address\": {\n   }\n },\n \"credit\": {\n   \"delayed\": false,\n   \"save_card_data\": false,\n   \"transaction_type\": \"FULL\",\n   \"number_installments\": 1,\n   \"card\": {\n     \"number_token\": \"{{number_token}}\",\n     \"cardholder_name\": \"JOAO DA SILVA\",\n     \"expiration_month\": \"12\",\n     \"expiration_year\": \"20\"\n   }\n }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payment/credit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payment",
												"credit"
											]
										},
										"description": "Não encontrado."
									},
									"response": []
								}
							],
							"description": "Pagamento com cartão de crédito",
							"_postman_isSubFolder": true
						},
						{
							"name": "boleto",
							"item": [
								{
									"name": "01 /v1/payments/boleto - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e471fbc-7c40-43e1-9143-b391125232cb",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    //response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description.should.be.equal(\"amount is invalid\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"amount\": -1,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"31/12/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Requisição inválida. Tentar gerar boleto informando amount com valor negativo."
									},
									"response": []
								},
								{
									"name": "02 /v1/payments/boleto - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1f656aa-588a-443e-9851-ed996a9125ca",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"\\\"amount\\\" is required\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"31/12/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Requisição inválida. Tentar gerar boleto sem o campo amount."
									},
									"response": []
								},
								{
									"name": "03 /v1/payments/boleto - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a66cd0b-2754-425b-854c-bb8dc5d131b0",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description.should.be.equal(\"seller_id is invalid\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"\",\r\n\"amount\": 100,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"26/02/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Requisição inválida. Tentar gerar boleto com campo seller_id em branco."
									},
									"response": []
								},
								{
									"name": "04 /v1/payments/boleto - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8df10514-9222-435d-ad0e-4550114301b4",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    //response.should.have.status(400);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  /*it('should return a valid description', () => {",
													"    response.body.details[0].message.should.contains(\"The expiration date can not be earlier than today.\");",
													"  });*/",
													"  ",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"amount\": 100,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"01/07/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Requisição inválida. Tentar gerar boleto informando expiration_date inválida."
									},
									"response": []
								},
								{
									"name": "05 /v1/payments/boleto - Status 401",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3048063b-87ba-495b-b615-e0c9c86ab39d",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(401);",
													"    response.should.be.json;",
													"    response.body.should.not.be.empty;",
													"    response.body.message.should.contains(\"Unauthorized\");",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description.should.contains(\"Unauthorized\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"amount\": 100,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"31/12/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto"
											]
										},
										"description": "Autenticação inválida. Desmarcar header flag Authorization."
									},
									"response": []
								},
								{
									"name": "06 /v1/payments/boleto - Status 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e646433-d775-45a4-86a2-00da40eb5527",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(404);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"Resource not found\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\"seller_id\": \"{{seller_id}}\",\r\n\"amount\": 100,\r\n\"currency\": \"BRL\",\r\n\"order\": {\r\n\"order_id\": \"6d2e4380-d8a3-4ccb-9138-c289182818a3\",\r\n\"sales_tax\": 0,\r\n\"product_type\": \"service\"\r\n},\r\n\"boleto\": {\r\n\"our_number\": \"123456789012\",\r\n\"document_number\": \"170500000019763\",\r\n\"expiration_date\": \"31/12/2018\",\r\n\"instructions\": \"Não receber após o vencimento\",\r\n\"provider\": \"santander\",\r\n\"assignor\": {\r\n\"name\": \"Loja do João da Silva\",\r\n\"document_type\": \"CNPJ\",\r\n\"document_number\": \"123456789000112\",\r\n\"code\": \"000987345\",\r\n\"agency\": \"4841\",\r\n\"collection_account\": \"101\"\r\n}\r\n},\r\n\"customer\": {\r\n\"first_name\": \"João\",\r\n\"name\": \"João da Silva\",\r\n\"document_type\": \"CPF\",\r\n\"document_number\": \"04341803514\",\r\n\"billing_address\": {\r\n\"street\": \"Av. Brasil\",\r\n\"number\": \"1000\",\r\n\"complement\": \"Sala 1\",\r\n\"district\": \"São Geraldo\",\r\n\"city\": \"Porto Alegre\",\r\n\"state\": \"RS\",\r\n\"country\": \"Brasil\",\r\n\"postal_code\": \"90230060\"\r\n}\r\n}\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boletos",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boletos"
											]
										},
										"description": "Não encontrado."
									},
									"response": []
								},
								{
									"name": "01 /v1/payments/boleto/{payment_id}/pdf - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40bbab93-135b-4445-949f-ed1be55ff6a8",
												"type": "text/javascript",
												"exec": [
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.body.should.not.be.empty;",
													"    response.body.should.be.equal(\"Boleto not found for id 7a786022bcbd9b00104f032f\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/7a786022bcbd9b00104f032f/pdf",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"7a786022bcbd9b00104f032f",
												"pdf"
											]
										},
										"description": "Requisição inválida."
									},
									"response": []
								},
								{
									"name": "02 /v1/payments/boleto/{payment_id}/pdf - Status 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a219f5d9-9fab-4419-9c61-243cac5ac5c7",
												"type": "text/javascript",
												"exec": [
													"var data = JSON.parse(responseBody);",
													"",
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(404);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"Resource not found\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/5a786022bcbd9b00104f032f/pdfs",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"5a786022bcbd9b00104f032f",
												"pdfs"
											]
										},
										"description": "Não encontrado."
									},
									"response": []
								},
								{
									"name": "01 /v1/payments/boleto/{payment_id}/html - Status 400",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40bbab93-135b-4445-949f-ed1be55ff6a8",
												"type": "text/javascript",
												"exec": [
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(400);",
													"    response.body.should.not.be.empty;",
													"    response.body.should.be.equal(\"Boleto not found for id 7a786022bcbd9b00104f032f\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/7a786022bcbd9b00104f032f/html",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"7a786022bcbd9b00104f032f",
												"html"
											]
										},
										"description": "Requisição inválida."
									},
									"response": []
								},
								{
									"name": "02 /v1/payments/boleto/{payment_id}/html - Status 404",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16156343-6bc9-414f-8608-c2359ef2ca82",
												"type": "text/javascript",
												"exec": [
													"eval(globals.postmanBDD);",
													"",
													"describe('Verifica response', () => {",
													"",
													"  it('should return a valid response', () => {",
													"    response.should.have.status(404);",
													"    response.body.should.not.be.empty;",
													"  });",
													"  ",
													"  it('should return a valid description', () => {",
													"    response.body.details[0].description_detail.should.be.equal(\"Resource not found\");",
													"  });",
													"  ",
													"});"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{baseUrl}}/payments/boleto/5a786022bcbd9b00104f032f/htmls",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												"boleto",
												"5a786022bcbd9b00104f032f",
												"htmls"
											]
										},
										"description": "Não encontrado."
									},
									"response": []
								}
							],
							"description": "Registro para pagamento com boleto",
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "insertionbin",
			"item": [
				{
					"name": "01 /auth/oauth/v2/token - Status 201",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "929dba9e-643c-43c0-99ce-c82f5bc589cc",
								"exec": [
									"// Salva lista de cartões",
									"var listObjs = [{brand: \"VISA\", card_number:4220611400867974},",
									"                {brand:\"MASTERCARD\", card_number:5155901222280001},",
									"                {brand:\"ELO\", card_number:5067230000009011},",
									"                {brand:\"HIPER\", card_number:6370950924782803},",
									"                {brand:\"AMEX\", card_number:374245002741006}];",
									"pm.globals.set('listCards', JSON.stringify(listObjs));",
									"",
									"// Função que gera números de CPF válidos",
									"pm.globals.set(\"cpf\", 'x'.replace( /x/, function cpf()",
									"{",
									"           var n = 9;",
									"           var n1 = gera_random(n);",
									"           var n2 = gera_random(n);",
									"           var n3 = gera_random(n);",
									"           var n4 = gera_random(n);",
									"           var n5 = gera_random(n);",
									"           var n6 = gera_random(n);",
									"           var n7 = gera_random(n);",
									"           var n8 = gera_random(n);",
									"           var n9 = gera_random(n);",
									"           var d1 = n9*2+n8*3+n7*4+n6*5+n5*6+n4*7+n3*8+n2*9+n1*10;",
									"           d1 = 11 - ( mod(d1,11) );",
									"           if (d1>=10) d1 = 0;",
									"           var d2 = d1*2+n9*3+n8*4+n7*5+n6*6+n5*7+n4*8+n3*9+n2*10+n1*11;",
									"           d2 = 11 - ( mod(d2,11) );",
									"           if (d2>=10) d2 = 0;",
									"           return ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+d1+d2;",
									"}));",
									"",
									"// Função para gerar números randômicos",
									"function gera_random(n)",
									"{",
									"    var ranNum = Math.round(Math.random()*n);",
									"    return ranNum;",
									"}",
									"",
									"// Função para retornar o resto da divisao entre números (mod)",
									"function mod(dividendo,divisor)",
									"{",
									"          return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3d53c620-aa6b-4070-9395-11a7a2ddd60b",
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\", data.access_token);\r",
									"\r",
									"eval(globals.postmanBDD);\r",
									"\r",
									"describe('Verifica autenticação', () => {\r",
									"\r",
									"  it('should return a valid response', () => {\r",
									"    response.should.have.status(200);\r",
									"    response.should.be.json;\r",
									"    response.body.should.not.be.empty;\r",
									"  });\r",
									"  \r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "Authorization",
								"value": "Basic {{oAuth}}"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "scope",
									"value": "oob",
									"type": "text"
								},
								{
									"key": "grant_type",
									"value": "client_credentials",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{uri}}/auth/oauth/v2/token",
							"host": [
								"{{uri}}"
							],
							"path": [
								"auth",
								"oauth",
								"v2",
								"token"
							]
						},
						"description": "Geração do token de acesso."
					},
					"response": []
				},
				{
					"name": "02 {{uri}}/simulator/consultabin/v1/brands - Status 200",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "41993bd9-5282-48a3-a4a9-f289cba56741",
								"exec": [
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "607234bb-4bee-466e-93f3-e8987382f403",
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"bin\", data.bin);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bin\": \"{{bin}}\",\n  \"name\": \"Master\",\n  \"pan\": 16,\n  \"cvv_len\": 3,\n  \"cvv_name\": \"CVV\",\n  \"gaps\": [\n    5,\n    10,\n    15\n  ]\n}"
						},
						"url": {
							"raw": "{{uri}}/simulator/consultabin/v1/brands",
							"host": [
								"{{uri}}"
							],
							"path": [
								"simulator",
								"consultabin",
								"v1",
								"brands"
							]
						},
						"description": "Inseri um novo bin."
					},
					"response": []
				},
				{
					"name": "03 {{uri}}/simulator/consultabin/v1/brands/search?bin={bin} - Status 200",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "912c2fc4-4d51-4fea-a9a8-9a7ab07a1692",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{token}}"
							},
							{
								"key": "Bin",
								"value": "{{bin}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{uri}}/simulator/consultabin/v1/brands/search?bin={{bin}}",
							"host": [
								"{{uri}}"
							],
							"path": [
								"simulator",
								"consultabin",
								"v1",
								"brands",
								"search"
							],
							"query": [
								{
									"key": "bin",
									"value": "{{bin}}"
								}
							]
						},
						"description": "Recupera algumas informações sobre o BIN ou N° cartão informado."
					},
					"response": []
				}
			]
		}
	]
}